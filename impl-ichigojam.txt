● μT-Kernel実装仕様書 IchigoJam(LPC1114FN28/102, ARM Cortex-M0)版


はじめに

本書では、μT-Kernelの特定のボードへの実装の仕様を記載する。 

対象とするボードは、IchigoJam(LPC1114FN28/102, ARM Cortex-M0)である。 
対象とするμT-Kernelソースコードのバージョンは1.01.03である。
準拠するμT-Kernel仕様書のバージョンは1.01.00である。

本書に記された仕様は、μT-Kernel仕様のハードウェアに依存した実装依存部に相当す
る。 
μT-Kernelの仕様については、μT-Kernel仕様書を参照。
また、ボードやCPUなどハードウェアの仕様については該当する各仕様書を参照。 


1. CPU

1.1 ハードウェア仕様

	CPU: NXP LPC1114FN28/102 (ARM Cortex-M0 Core)
	ROM: 32KB (Flash ROM)
	RAM: 4KB (SRAM)

1.2 保護レベルと動作モード

保護レベルは0〜3があるが、どの保護レベルが指定されても保護レベル0として扱う。
CPUの動作モードは、常に特権モードとする。

1.3 Thumb-2命令セットの使用

IchigoJamに使用されるCPU(LPC1114FN28/102, ARM Cortex-M0 Core)はThumb-2命令セッ
トのみをサポートするため、「Thumb-2 Instruction Set」に従ってプログラミングす
る必要がある。
タスクやハンドラをThumb-2命令セットを使用して実装する場合、そのアドレスの最下
位ビットには1を指定する必要がある（0が指定された場合はARM命令セットとみなされ
る）が、これは通常リンカが自動的に行うためにプログラマは特に意識する必要はな
い。


2. メモリマップ

2.1 全体メモリマップ

	0x00000000 +---------------------+
		   | Flash ROM (32KB)    |
	0x00008000 +---------------------+
		   | (予約)              |
	0x10000000 +---------------------+
		   | SRAM (4KB)          |
	0x10001000 +---------------------+
		   | (予約)              |
	0x1fff0000 +---------------------+
		   | Boot ROM (16KB)     |
	0x1fff4000 +---------------------+
		   | (予約)              |
	0x40000000 +---------------------+
		   | APB peripherals     |
	0x40008000 +---------------------+
		   | (予約)              |
	0x50000000 +---------------------+
		   | AHB peripherals     |
	0x50200000 +---------------------+
		   | (予約)              |
	0xffffffff +---------------------+

2.2 ROM領域メモリマップ 

	0x00000000 +---------------------+
		   | 割込ベクタテーブル  |
		   |- - - - - - - - - - -|
		   | μT-Kernelコード    |
		   |- - - - - - - - - - -|
		   | ReadOnlyデータ      |
		   |- - - - - - - - - - -|
		   | (未使用)            |
	0x00008000 +---------------------+

割込ベクタテーブルは常にFlash ROM上に存在する。

2.3 SRAM領域メモリマップ

	0x10000000 +---------------------+ ←SYSTEMAREA_TOP
		   | データセクション    |
		   |- - - - - - - - - - -|
		   | NoInitセクション    |
		   |- - - - - - - - - - -|
		   | BSSセクション       |
		   |- - - - - - - - - - -|
		   | μT-Kernel管理領域  |
		   |- - - - - - - - - - -|
		   | 初期化スタック領域  |
	0x10001000 +---------------------+ ←SYSTEMAREA_END

		   NoInit: ゼロ初期化されないBSSセクション

μT-Kernel管理領域は、μT-Kernelのメモリ管理機能で使用する領域であり、原則とし
てBSSセクションの終端から初期化スタック領域までの間の領域となる。
通常は、空いているメモリ領域が全てμT-Kernel管理領域に割り当てられるが、設定に
より変更することが可能。

2.4 スタック 

本システムには以下の3種類のスタックが存在する。

(1) 初期化スタック

ハードウェアがリセットされてからμT-Kernelの初期タスクが起動するまでの間に使用
されるスタック。 
初期化スタックのサイズはutk_config_depend.h(EXC_STACK_SIZE)で設定する。

(2) 一時スタック 

タスクディスパッチ処理の間に使用されるスタック。 
一時スタックのサイズはutk_config_depend.h(TMP_STACK_SIZE)で設定する。

(3) システムスタック 

μT-Kernelが管理するスタックで、タスク毎に1本ずつ存在する。
μT-Kernel には保護レベルの概念が無いため、T-Kernelのようにユーザスタックとシ
ステムスタックの使い分けはない。
Cortex-M0のスタックポインタはMSP/PSPの2つがあるが、本システムではMSPのみ使用す
る。よって、割込スタックは分離しておらず、割込ハンドラもタスクのスタックを使用
する。


3. 割込および例外

3.1 例外番号とIRQ番号

LPC1114には例外番号1〜31があり、システム例外に1〜15が、IRQ（外部割込）用に16〜
31が割り当てられている。本システムでは、使用できるIRQ番号（tk_def_int()の引数
dintno）を16〜31とする。

IRQ番号のうち、27はμT-Kernelが使用する。その他のIRQ番号は、ハードウェア
(LPC1114)の割込みコントローラ(NVIC)が管理する割込要因に予約する。詳細は
「LPC111x/LPC11Cxx User manual」を参照。

3.2 ソフトウェア割込の割当 

μT-Kernelのソフトウェア割込が使用するIRQ番号を、以下に示す。

	IRQ27	強制ディスパッチ 

3.3 例外・割込ハンドラ

本ハードウェアのCPUコアであるCortex-M0は、割込の入口で自動的にスタックにレジス
タR0〜R3・R12・LR・PSR・PCをプッシュし、割込の出口でそれらをポップする機構を持
つことで、割込ハンドラをC言語の関数で記述できるようになっている。

具体的には、例外が発生するとプロセッサにより以下の処理が行われる。

	(1) R0〜R3・R12・LR・PC・xPSRの各レジスタの内容をスタックにプッシュ
	(2) ベクタテーブルから例外・割込みハンドラの開始アドレスを取得
	(3) SP・PSR・LR・PCの更新
	    ・PSRの下位9ビット(IPSR)に、発生した例外の番号が設定される
	    ・LRは、割込復帰操作のための特殊な値に更新される

ハンドラを終了しリターンする時は、EXC_RETURN(asm_depend.h)を使用する。リターン
時にプロセッサにより(1)に示した8種類のレジスタの内容がレジスタからポップされ、
SPも例外・割込発生時の値に戻される。

なお、(1)に示した8種類以外のレジスタの値はスタックに退避されないため、各ハンド
ラで必要に応じて保存する必要がある。ただし、この仕様はC言語の呼出規則に従って
いるために、割込ハンドラをC言語で記述する場合は特に意識する必要はない。


4. 初期化および起動処理

4.1 μT-Kernelの起動手順

システムがリセットされるとμT-Kernelが起動する。
μT-Kernelが起動してから、main関数が呼ばれるまでのμT-Kernelの起動手順を、以下
に示す。

icrt0.S 

	(1) dataセクションの初期化
	(2) bssセクションの初期化
	(3) μT-Kernel管理領域の再計算
	(4) 割込優先度の設定
	(5) 強制ディスパッチ割込の許可 
	(6) システムクロック設定 [init_clock_control]
	(7) main関数(sysinit_main.c)呼出

4.2 ユーザ初期化プログラム 

ユーザ初期化プログラムは、ユーザ定義のシステム起動処理/終了処理を実行する。
ユーザ初期化プログラムは、初期タスクから次の形式で呼び出される。
 
	INT	userinit(INT ac, UB **av)

	ac	= 0	起動時呼出
		= -1	終了時呼出

	戻値 	1以上 	usermain()を起動
		0以下 	システム終了

システム起動時にac = 0で呼び出され、システム終了時にac = -1で呼び出される。終
了時の呼び出しでは、戻値は無視される。処理の概略は以下の通り。

	fin = userinit(0, NULL);
	if (fin > 0) {
		usermain();
	}
	userinit(-1, NULL);

ユーザ初期化プログラムは初期タスクのコンテキストで実行される。タスク優先度は
(CFN_MAX_PRI-2)。


5. μT-Kernel実装定義

5.1 システム状態判定

(1) タスク独立部（割込ハンドラ、タイムイベントハンドラ）

μT-Kernel内にソフトウェア的なフラグを設けて判定する。

	knl_taskindp = 0	タスク部
	knl_taskindp > 0	タスク独立部
	
(2) 準タスク部（拡張SVCハンドラ）

μT-Kernel内にソフトウェア的なフラグを設けて判定する。

	TCBのsysmode = 0	タスク部 
	TCBのsysmode > 0	準タスク部 

5.2 μT-Kernelで使用する例外・割込

	例外番号 11	SVC割込
	例外番号 14	PendSV割込
	例外番号 15	System Tick Timer(SysTick)割込
	例外番号 27	強制ディスパッチ

割込優先順位は以下のように設定される。

	SVC割込				0x00
	PendSV割込			0xc0
	SysTick割込			0x40
	強制ディスパッチ割込(IRQ27)	0xc0

5.3 システムコールのインタフェース

システムコールは、直接呼び出しのみの対応とする。
インタフェースライブラリ（SVC命令）を使用したシステムコールの呼び出し、および
拡張SVCには対応しない。

5.4 割込ハンドラ

割込ハンドラの、ハードウェアに依存した実装定義を以下に示す。

・割込ハンドラ定義情報 : T_DINT

	typedef struct t_dint {
		ATR	intatr;	/* 割込ハンドラ属性 */ 
		FP	inthdr;	/* 割込ハンドラアドレス */
	} T_DINT;

・割込み定義番号 : dintno

	dintnoは16〜31の範囲で指定可能（ただし、27は使用しないこと）

本ハードウェアのCPUコアであるCortex-M0は、割込の入口で自動的にスタックにレジス
タR0〜R3・R12・LR・PSR・PCをプッシュし、割込の出口でそれらをポップする機構を持
つことで、割込ハンドラをC言語の関数で記述できるようになっている。

本システムではこれに従い、以下の実装とする。

	・割込ハンドラはC言語の関数で記述
	・ハンドラ属性はTA_HLNGを指定

割込ハンドラ属性はTA_HLNGであるため、例外/割込みベクタテーブルにはμT-Kernel内
の高級言語対応ルーチンのアドレスが設定され、高級言語対応ルーチンから設定された
割込ハンドラが呼び出される。

割込ハンドラの定義は以下の通り。

	void	inthdr(UINT dintno)

	dintno	発生した例外/割込みベクタ番号 
		デフォルトハンドラの場合、デフォルトハンドラのベクタ番号ではな
		く、発生した例外/割込のベクタ番号となる

割込ハンドラに入ったときのCPUの状態は以下の通り。

	PRIMASK = 0	割込許可
	xPSR.T = 1	Thumbモード
			（ハンドラ起動アドレスの最下位ビットが1） 

割込ハンドラからの復帰は以下の2つのステップを経て行われる。

	(1) ハンドラ関数から高級言語対応ルーチンへreturn 
	(2) 高級言語対応ルーチンの終端でEXC_RETURNを実行 

EXC_RETURNを実行すると、割込みコントローラ(NVIC)レジスタの例外アクティブビット
がクリアされるため、割込みハンドラ内でNVICの割込みのクリアを行う必要はない。

5.5 タイムイベントハンドラ

ハンドラ属性にTA_ASMを指定した場合も、TA_HLNGの場合と同様に高級言語対応ルーチ
ンを経由して呼び出される。したがって、TA_ASMの場合もハンドラへ渡されるパラメー
タ (exinf)はC言語の規則に従ってR0レジスタに渡される。また、C言語の呼出規則に
従ってレジスタを保存する必要がある。

5.6 タスクの実装依存定義

タスクのハードウェアに依存した実装定義を以下に示す。

(1) タスク生成情報 : T_CTSK 

独自に追加した情報はない。
 
	typedef struct t_ctsk {
		VP	exinf;		/* 拡張情報 */
		ATR	tskatr;		/* タスク属性 */
		FP	task;		/* タスク起動アドレス */
		PRI	itskpri;	/* タスク起動時優先度 */
		W	stksz;		/* スタックサイズ(バイト) */
		UB	dsname[8];	/* DSオブジェクト名称 */
		VP	bufptr;		/* ユーザバッファポインタ */
	} T_CTSK;

(2) タスク属性

実装独自属性はない。
タスク属性(tskatr)はTA_HLNGのみ指定可能（TA_ASMは対応しない）。

	tskatr := TA_HLNG
		| [TA_USERBUF] | [TA_DSNAME]
		| (TA_RNG0 || TA_RNG1 || TA_RNG2 || TA_RNG3)

(3) タスクの形式 

タスクは次の形式で記述する。

	void	task(INT stacd, VP exinf)

タスク起動時のレジスタの状態は下記の通り。

	PRIMASK = 0	割込許可 
	xPSR.T = 1	Thumbモード（タスク起動アドレスの最下位ビットが1）
	
	R0 = stacd	タスク起動パラメータ
	R1 = exinf	タスク拡張情報
	R13(sp)		スタックポインタ
	
その他のレジスタは不定。 
タスクの終了は、必ずtk_ext_tsk()またはtk_exd_tsk()を用いること。単にreturnして
もタスクの終了とはならず、その場合の動作は保証しない。

5.7 タスクレジスタの取得/設定

	ER	tk_set_reg(ID tskid, T_REGS *pk_regs,
					T_EIT *pk_eit, T_CREGS *pk_cregs);
	ER	tk_get_reg(ID tskid, T_REGS *pk_regs,
					T_EIT *pk_eit, T_CREGS *pk_cregs); 

タスクレジスタの取得/設定(tk_get_reg/tk_set_reg)の対象となるレジスタは、以下の
ように定義される。

(1) 汎用レジスタ : T_REGS 

	typedef struct t_regs {
		VW	r[13];	/* 汎用レジスタ R0〜R12 */
		VP	lr;	/* リンクレジスタ R14 */
	} T_REGS;

DORMANT状態のタスクに対してレジスタの設定を行ったとき、R0, R1はtk_sta_tsk()に
よってタスク起動パラメータ／拡張情報が設定されるため、tk_set_reg() で設定した
値は捨てられることになる。

(2) 例外時に保存されるレジスタ : T_EIT

	typedef struct t_eit {
		VP	pc;		/* プログラムカウンタ R15 */
		UW	cpsr;		/* プログラムステータスレジスタ */
		UW	taskmode;	/* タスクモードフラグ */
	} T_EIT;

CPSRは、フラグフィールド（ビット31〜24）以外は変更できない。他のフィールド
（ビット23〜0）への設定は無視される。
taskmodeは、システム共有情報にあるタスクモードフラグと同じ。メモリのアクセス権
情報を保持するレジスタとして扱われる。

(3) 制御レジスタ 

	typedef struct t_cregs {
		VP	ssp;	/* システムスタックポインタ R13 */
	} T_CREGS;

5.8 システムコール・拡張SVC呼出元情報 

システムコール・拡張SVCフックには対応しない。

5.9 割込コントローラ制御

割込コントローラの制御はハードウェアへの依存が強いため、μT-Kernel仕様書では規
定されていない。IchigoJamでは以下の実装とする。

(1) 割込定義番号（IRQ番号）

割込み定義番号（16〜31）は以下のものを使用する。

	・27	強制ディスパッチ 

(2) 割込許可

	void	EnableInt(INTVEC intvec, INT intpri); 

intvecで指定した割込み定義番号の割込を、intpriの優先順位で許可する。
intpriは0x00, 0x40, 0x80, 0xc0が有効で、値が大きい方が優先順位は高い。
なお、優先順位が等しい場合、割り込み定義番号の小さな割込が優先される。

(3) 割込禁止 

	void	DisableInt(INTVEC intvec);

intvecで指定した割込定義番号の割込みを禁止する。

(4) 割込要求の有無の確認 

	BOOL	CheckInt(INTVEC intvec);

intvecの割込要求があるか調べ、割込要求があればTRUE（0以外）を返す。


6. システムコンフィグレーションデータ

utk_config_depend.hでは、μT-Kernelのシステム構成情報や各種資源数、各種制限値
などの設定を記述する。なお、各項目の指定可能範囲の最大値は論理的な最大値であ
り、実際にはメモリの使用量により制限を受ける。

6.1 utk_config_depend.hの設定値

/*
 *	utk_config_depend.h (lpc1114)
 *	System Configuration Definition
 */

/* RAMINFO */
#define SYSTEMAREA_TOP		0x10000000
#define SYSTEMAREA_END		0x10001000

	※μT-Kernelのメモリ管理機能により動的に管理される領域
	  SRAM領域の最下位アドレスと最上位アドレスを指定する。

/* User definition */
#define RI_USERAREA_TOP		0x10000000

	※本設定は使用しない 

#define RI_USERINIT		NULL

	※ユーザー初期化/完了プログラム

/* SYSCONF */
#define CFN_TIMER_PERIOD	10

	※システムタイマの割込み周期（ミリ秒）
	  各種の時間指定の最小分解能（精度）となる。

#define CFN_MAX_TSKID		2
#define CFN_MAX_SEMID		1
#define CFN_MAX_FLGID		1
#define CFN_MAX_MBXID		1
#define CFN_MAX_MTXID		0
#define CFN_MAX_MBFID		0
#define CFN_MAX_PORID		0
#define CFN_MAX_MPLID		0
#define CFN_MAX_MPFID		0
#define CFN_MAX_CYCID		0
#define CFN_MAX_ALMID		0
#define CFN_MAX_SSYID		0
#define CFN_MAX_SSYPRI		0

	※μT-Kernelの各オブジェクトの最大数
	  カーネルが使用するオブジェクトの数も考慮して指定する必要がある。

#define CFN_MAX_REGDEV		(0)

	※tk_def_dev()で登録可能な最大デバイス数
	  物理デバイスの最大数となる。

#define CFN_MAX_OPNDEV		(0)

	※tk_opn_dev()でオープン可能な最大数
	  デバイスディスクリプタの最大数となる。

#define CFN_MAX_REQDEV		(0)

	※tk_rea_dev()、tk_wri_dev()、tk_srea_dev()、tk_swri_dev()で要求可能な
	  最大数。リクエストIDの最大数となる。

#define CFN_VER_MAKER		0x011C
#define CFN_VER_PRID		0
#define CFN_VER_SPVER		0x6101
#define CFN_VER_PRVER		0x0101
#define CFN_VER_PRNO1		0
#define CFN_VER_PRNO2		0
#define CFN_VER_PRNO3		0
#define CFN_VER_PRNO4		0

	※バージョン情報(tk_ref_ver)

#define CFN_REALMEMEND		((VP)0x10001000)

	※μT-Kernel管理領域で利用するRAMの最上位アドレス

/*
 * Initial task priority
 */
#define INIT_TASK_PRI		(MAX_PRI-2)

	※初期タスクの優先度

/*
 * Use zero-clear bss section
 */
#define USE_NOINIT		(0)

	※1 : 初期値を持たない静的変数（BSS配置）のうち、初期化が必要のない変
	      数はカーネル初期化処理内でゼロクリアしない
	      ゼロクリアの処理が削減される為、カーネル起動時間が短縮される。
	  0 : 全ての初期値を持たない静的変数（BSS配置）をゼロクリアする

/*
 * Stack size for each mode
 */
#define EXC_STACK_SIZE		0x200
#define TMP_STACK_SIZE		0x80
#define USR_STACK_SIZE		0		/* not used */

	※各例外モード用のスタックサイズ（バイト数）
	  本システムでは初期化スタックのサイズとして使用する。

#define EXCEPTION_STACK_TOP	SYSTEMAREA_END

	※スタック領域の初期位置 
	  例外モード用スタックは、通常はハンドラの入口と出口においてのみ使用す
	  るため、 大きな容量を必要としない。

#define TMP_STACK_TOP		(EXCEPTION_STACK_TOP - EXC_STACK_SIZE)

	※テンポラリスタックの位置

#define APPLICATION_STACK_TOP	(TMP_STACK_TOP - TMP_STACK_SIZE)

	※アプリケーション用スタック領域の初期位置
	  本システムでは利用しない。

/*
 * Use dynamic memory allocation
 */
#define USE_IMALLOC		(1)

	※1 : カーネル内部の動的メモリ割当機能を使用する
	  0 : カーネル内部の動的メモリ割当機能を使用しない
	      タスク・メッセージバッファ・固定長／可変長メモリプールのオブジェ
	      クト生成時はTA_USERBUFを指定して、アプリケーションがバッファを指
	      定する必要がある。

/*
 * Use program trace function (in debugger support)
 */
#define USE_HOOK_TRACE		(0)

	※0 : デバッガサポート機能のフック機構を使用しない（変更不可）

/*
 * Use clean-up sequence
 */
#define USE_CLEANUP		(1)

	※1 : アプリケーション終了後に、カーネルのクリーンアップ処理を行う
	  0 : アプリケーション終了後に、カーネルのクリーンアップ処理を行わない
	      usermain関数から戻らないシステムは、本フラグをオフにすることで
	      ROM消費量を低減できる。

/*
 * Use high level programming language support routine
 */
#define USE_HLL_INTHDR		(1)

	※1 : 割込ハンドラで高級言語対応ルーチンを使用する（変更不可）

6.2 sysinfo_depend.hの設定値

#define N_INTVEC	32

	※割込定義番号の個数を指定する


7. 制限事項 

本バージョンのμT-Kernelの制限事項、注意事項を以下に示す。

7.1 未サポートの機能 

下記の機能はサポートしない。

	・TA_ASM属性
	・拡張SVC
	・デバッガサポート
	・拡張SVC
	・SVC命令によるシステムコールの呼び出し
